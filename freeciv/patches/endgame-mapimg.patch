diff --git a/common/mapimg.c b/common/mapimg.c
index 9303a32b1e..72708cb733 100644
--- a/common/mapimg.c
+++ b/common/mapimg.c
@@ -1372,13 +1372,11 @@ bool mapimg_create(struct mapdef *pmapdef, bool force, const char *savename,
   case SHOW_NONE:    /* no player one the map */
   case SHOW_ALL:     /* show all players in one map */
   case SHOW_PLRBV:   /* display player(s) given by bitvector */
-    generate_save_name(savename, mapimgfile, sizeof(mapimgfile),
-                       mapimg_generate_name(pmapdef));
 
     pimg = img_new(pmapdef, CURRENT_TOPOLOGY, CURRENT_WRAP,
                    wld.map.xsize, wld.map.ysize);
     img_createmap(pimg);
-    if (!img_save(pimg, mapimgfile, path)) {
+    if (!img_save(pimg, savename, path)) {
       ret = FALSE;
     }
     img_destroy(pimg);
diff --git a/server/srv_main.c b/server/srv_main.c
index 957496883e..818f2d7205 100644
--- a/server/srv_main.c
+++ b/server/srv_main.c
@@ -2877,7 +2877,10 @@ static void srv_running(void)
           for (i = 0; i < mapimg_count(); i++) {
             struct mapdef *pmapdef = mapimg_isvalid(i);
             if (pmapdef != NULL) {
-              mapimg_create(pmapdef, FALSE, game.server.save_name,
+              char imgfilename[128];
+              fc_snprintf(imgfilename, sizeof(imgfilename), "map-%d", srvarg.port);
+
+              mapimg_create(pmapdef, FALSE, imgfilename,
                             srvarg.saves_pathname);
             } else {
               log_error("%s", mapimg_error());
@@ -3089,6 +3092,20 @@ static void srv_scores(void)
      * with no human players. */
     save_game_auto("Game over", AS_GAME_OVER);
   }
+  int i = 0;
+  for (i = 0; i < mapimg_count(); i++) {
+    struct mapdef *pmapdef = mapimg_isvalid(i);
+    if (pmapdef != NULL) {
+      char imgfilename[128];
+      fc_snprintf(imgfilename, sizeof(imgfilename), "map-%d", srvarg.port);
+
+      mapimg_create(pmapdef, TRUE, imgfilename,
+                    srvarg.saves_pathname);
+    } else {
+      log_error("%s", mapimg_error());
+    }
+  }
+
 }
 
 /**********************************************************************//**
